{"version":3,"sources":["services/phonebook.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","res","data","newObject","post","id","delete","put","Notification","message","type","className","Search","query","handleQueryChange","value","onChange","PersonForm","handleSubmit","newName","newNumber","handleNewNameChange","handleNewNumberChange","onSubmit","People","people","handleRemove","map","person","key","Person","name","number","onClick","App","useState","persons","setPersons","setQuery","setNewName","setNewNumber","notificationMessage","setNotificationMessage","notificationType","setNotificationType","useEffect","phonebookService","visiblePeople","filter","p","RegExp","test","slice","sort","a","b","notify","setTimeout","e","target","event","newPersonData","preventDefault","some","window","confirm","catch","err","console","log","response","error","_","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e009199.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => axios.get(baseUrl).then(res=>res.data);\r\n\r\nconst create = newObject => axios.post(baseUrl, newObject).then(res=>res.data);\r\n\r\nconst remove = id => axios.delete(`${baseUrl}/${id}`).then(res=>res.data);\r\n\r\nconst update = (id, newObject) => axios.put(`${baseUrl}/${id}`, newObject).then(res=>res.data);\r\n\r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  remove: remove,\r\n  update: update \r\n}","import React, { useState, useEffect } from 'react';\nimport phonebookService from './services/phonebook.js';\nimport './index.css';\n\nconst Notification = ({ message, type = \"notification\" }) => message === null ? null : <div className={type}>{message}</div>\n\nconst Search = ({ query, handleQueryChange }) => <div>Search: <input value={query} onChange={handleQueryChange}/></div>;\n\nconst PersonForm = ({ handleSubmit, newName, newNumber, handleNewNameChange, handleNewNumberChange }) => (\n    <form onSubmit={handleSubmit}>\n        <div>\n          Name: <input value={newName} onChange={handleNewNameChange}/>\n        </div>\n        <div>\n          Number: <input value={newNumber} onChange={handleNewNumberChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n);\n\nconst People = ({ people, handleRemove }) => <div>{people.map(person => <Person key={person.id} person={person} handleRemove={handleRemove(person.id)}/>)}</div>;\n\nconst Person = ({ person, handleRemove }) => <p key={person.name}>{person.name} {person.number} <button onClick={handleRemove}>Delete</button></p>;\n\nconst App = () => {\n    const [persons, setPersons] = useState([]);\n    const [query, setQuery] = useState('');\n    const [newName, setNewName] = useState('');\n    const [newNumber, setNewNumber] = useState('');\n    const [notificationMessage, setNotificationMessage] = useState(null);\n    const [notificationType, setNotificationType] = useState('notification');\n\n    useEffect(() => {\n        phonebookService\n            .getAll()\n            .then(data => {\n                setPersons(data);\n            })\n    }, []);\n\n    const visiblePeople = (query !== '' ? persons.filter(p => RegExp(query, 'i').test(p.name)) : persons).slice().sort((a, b) => a.name > b.name ? 1 : -1);\n\n    const notify = (message, type = 'notification') => {\n        setNotificationMessage(message);\n        setNotificationType(type);\n        setTimeout(() => {\n            setNotificationMessage(null);\n        }, 3000);\n    }\n\n    const addPerson = event => {\n        const newPersonData = { name: newName, number: newNumber };\n        event.preventDefault();\n        if (newName === '') {\n            notify('Cannot add a person without a name!', 'error');\n            return false;\n        }\n        if (!/^[\\d-+. ]*$/.test(newNumber)) { // Obviously, in production use a real validation technique\n            notify('Phone number may only contain digits, +, -, or spaces!', 'error');\n            return false;\n        }\n        if (persons.some(e => e.name === newName)) {\n            if (window.confirm(`Overwrite the entry for ${newName}?`)) {\n                phonebookService\n                    .update(persons.filter(p => p.name === newName)[0].id, newPersonData)\n                    .then(data => {\n                        notify(`${data.name} has been updated!`);\n                        setPersons([...persons.filter(person => data.name !== person.name), data]);\n                        setNewName('');\n                        setNewNumber('');\n                    })\n                    .catch(err => notify(`${newName} could not be updated; out of sync with server?`));\n                return true;\n            }\n            return false;\n        }\n\n\n        phonebookService\n            .create(newPersonData)\n            .then(data => {\n                notify(`${data.name} has been created!`);\n                setPersons([...persons, data]);\n                setNewName('');\n                setNewNumber('');\n            })\n            .catch(err => {\n                console.log(err.response.data.error);\n                notify(err.response.data.error, 'error');\n            });\n    };\n\n    const removePerson = id => event => {\n        event.preventDefault();\n        if (window.confirm('Are you sure you want to delete this entry?')) {\n            phonebookService\n                .remove(id)\n                .then(_ => {\n                    setPersons(persons.filter(person => person.id !== id));\n                });\n        }\n    };\n\n    return (\n        <div>\n        <Notification message={notificationMessage} type={notificationType}/>\n        <h2>Phonebook</h2>\n        <Search query={query} handleQueryChange={e=>setQuery(e.target.value)}/>\n        <br/>\n        <PersonForm\n          handleSubmit={addPerson}\n          newName={newName}\n          handleNewNameChange={e=>setNewName(e.target.value)}\n          newNumber={newNumber}\n          handleNewNumberChange={e=>setNewNumber(e.target.value)}\n        />\n        <h2>Numbers</h2>\n        <People people={visiblePeople} handleRemove={removePerson}/>\n      </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}